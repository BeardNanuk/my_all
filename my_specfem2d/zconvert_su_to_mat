#!/usr/bin/env python

import os


cwd = os.getcwd()
#onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
src_files = os.listdir(cwd)

import argparse

from obspy import read
import matplotlib.pyplot as plt
from seisflows.tools.graphics import plot_section
import numpy as np
import obspy
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

from obspy.core.stream import Stream

import argparse

from obspy import read
import matplotlib.pyplot as plt

from seisflows.tools.graphics import plot_section

import scipy.io as sio
# for file finding
import glob

def _convert_to_array(stream):
    """ Extracts trace data from an obspy stream and returns a 2D array.

    Parameters
    ----------
    stream: Obspy stream object
        Stream storing trace data

    Returns
    -------
    output: ndarray, ndim=2
        Returns an (nt*nr) array. nt and nr are the number of sample points
        and number of traces respectively. Assumes trace lengths are equal
        for all traces.

    Raises
    ------
    TypeError
        If stream is not an obspy stream
    """
    if not isinstance(stream, Stream):
        raise TypeError('Input object should be an obspy stream.')

    nt = len(stream.traces[0].data)
    nr = len(stream)
    output = np.zeros((nt, nr))

    #hey, this is pretty much what's in Stream: turple list, (number, trace) 
    #trace has the attribute of data. The data can be regarded to a column of data. 
    for i, trace in enumerate(stream):
        output[:, i] = trace.data[:]

    return output


# create a class of structure that can be used to store parameters for ML 
class para_struct:

    def __init__(self, name):
        self.name = name

    pass

sensor_array_su = para_struct('sensor_array_su')
OUTPUT_FILES_path = "OUTPUT_FILES"
sensor_array_su.filenamelist = glob.glob(OUTPUT_FILES_path + '/' + "*file_single.su")


for f in sensor_array_su.filenamelist:
    
    fhead=(f[len(OUTPUT_FILES_path)+1:len(OUTPUT_FILES_path)+3])
    print(fhead)
    #relativefiles = './' + OUTPUT_FILES_path + '/' + fhead
    stream = read(f,format='SU', byteorder='<')
    #sismo_png_fn = './' + OUTPUT_FILES_path + '/' + fhead + '_seismo.png'
    #./savesismo f -save= sismo_png_fn -c=100 -xint=2 -yint=1000 -c=90 > /dev/null &
    matfile = './' + OUTPUT_FILES_path + '/' + fhead + '.mat'
    txtfile = './' + OUTPUT_FILES_path + '/' + fhead + '.txt'
    # convert stream to image array
    data = _convert_to_array(stream)
    adict = {}
    adict[f[:2]] = data
    #adict['pkt_np_array'] = data
    adict['whatever'] = 1 

    sio.savemat(matfile,adict)
    np.savetxt(txtfile, data, fmt='%20.19f')   # X is an array


#data_load = np.loadtxt("OUTPUT_FILES/wcsg.txt")
#print(type(data_load))







d=(f[len(OUTPUT_FILES_path)+1:len(OUTPUT_FILES_path)+3])
